//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue!
//You should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//Much of this file you will only have to set up once, so take heart!


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise] or by just sticking OnFunction somewhere. A function that does NOT start with On, however, can be a bit finicky. You can create your own functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.

//If you're having trouble getting a function of yours to run, like Doodlebop, try changing it to OnDoodlebop and see if that fixes it.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This is where you'll want to set up an introduction and ask your user for information your ghost will need, like their name and what pronouns they'll be using. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot
{
	if reference0 == 0
    {
        firstBoot = 1
    }
    else
    {
        firstBoot = 2
    }
 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "USER" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	narrFeelings = 0 //Setting relationship level to neutral
	narrMood = 50 //Setting mood level to neutral
	stanFeelings = 0
	stanMood = 50
	givenfood = 0 //Resetting item limits
	givenwater = 0
	givencoffee = 0
	giventea = 0
	givenbooks = 0
	givenwall = 0
	givenscreen = 0
	stanleymode = 0 //the mode itself which allows Stanley to return
	stanleyback = 0 //for remembering that it's unlocked
	firstBoot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name.
	
	if reference0 > 0
 	{
		"\![enter,passivemode]\0\s[0]...Wait, what?\w8\n\n[half] Did it work?\w8\n\n[half]...Wait, I seem to have a memory of this particular computer...\x\w8\0\c\s[0]Nevermind.\![timerraise,1000,1,OnTeachName]\e"
	}
	elseif reference0 == 0
 	{
 		{
 		"\![enter,passivemode]\0\s[0]...Wait, what?\w8\n\n[half] Did it work? User, can you hear me?\w8\n\n[half]...Wait, is this one of those text-based games? Can you at least read me?\x\w8\0\c\s[0]Hm? Who are you?\![timerraise,1000,1,OnTeachName]\e"
		}
 	}
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.

//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy. It's up to you though!
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passhour = 0
	passmin = 0
	passsec = 0
	BootReset
	
 	"\0\s[0]\1\s[10]" //This sets them up in their neutral pose for now.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly. Simplified, it'd look like...
	//OnBoot
	//{
	//lastTalk = ""
	//passhour = 0
	//passmin = 0
	//passsec = 0 
	//"\0\s[0]\1\s[10]%(normalboottalk)"
	//}
	//If you want to check what day it is first though, read on ahead!
	--
	
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[0]It's %(bornmonthprint) %(borndayprint).\w8 Happy birthday, %(username). I'm so glad you survived another full revolution around the Sun.\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	
	elseif dayslot == "4month 27day" //Like above, this if statement is checking the date. It's looking for the 4th month and the twenty-seventh day.
	
	//*********************Advanced User Info*******************************
	//elseif statements always go after an if statement, and essentially are just what they sound like... if this thing happens, do this; else, if this thing happens, do this. elseifs are good if you have multiple things you want to check for in one function, like multiple days of the year as we're doing right now. elseifs go in descending order, so it'll always check if one is true, then if two is true, then if three is true, and so on.
	//***********************************************************************
	
	{
				"\0\s[0]Today is April 27th. For some reason that date seems to be significant...\e"
	}
	elseif dayslot == "10month 17day"
	{
				"\0\s[0]Today is October 17th. For some reason that date seems to be significant...\e"
	}
	elseif dayslot == "07month 31day"
	{
				"\0\s[0]Today is July 31st. For some reason that date seems to be significant...\e"			
				//You can see how these basically work. You can add in new elseif statements along these same lines with your own dayslots if you want to have them say things for all sorts of days. You can also change these existing ones I put in as examples to other dates, like your character's birthdays, perhaps. This is up to you! If you don't care about this, you can delete all the elseifs and just leave the one for the user's birthday.
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}

BootReset
{
	givenfood = 0 //Resetting item limits
	givenwater = 0
	givencoffee = 0
	giventea = 0
	givenbooks = 0
	givenwall = 0
	givenscreen = 0
	stanleymode = 0 //the mode itself which allows Stanley to return
	narrMood = RAND(50) + (narrFeelings)
	{
	if narrMood >= 100
		{
		narrMood = 100
		}
	else
		{
		"\0\s[0]\e"
		}
	}
	stanMood = RAND(50) + (narrFeelings)
	{
	if stanMood >= 100
		{
		stanMood = 100
		}
	else
		{
		"\0\s[0]\e"
		}
	}
}
//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.
//Reference: What RAND does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
//Pronoun Reference: %(nomPro)/%(oblPro)/%(posPro)

normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		"\0\s[0]It's Saturday night...\w8 But do I really need to come here at this hour? I was rather busy. Oh well, I suppose I can be here for sometime, although I believe you really need to sleep right now, as you're a human, unless you're not a human, which could explain the possibility of booting me up now...\e"
		}
	elseif RAND(100) < 40
		{
		"\0\s[6]Another day, another set of problems to solve, dreams to work toward, experiences to live through...\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up %(posPro) daily programs.\e"
		
		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up a brand new program %(nomPro) were testing out.\e"
		
		"\0\s[0]Do I really need to come here at this hour? I was very busy on an important project. Oh well, I suppose I can be here for sometime.\e"
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up %(posPro) daily programs.\e"
		
		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up a brand new program %(nomPro) was testing out.\e"
		}
		elseif timeslot == "lunch"
		{
		"\0\s[0]Good morning.\e"

		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up %(posPro) daily programs.\e"

		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up a brand new program %(nomPro) was testing out.\e"
		}
		elseif timeslot == "afternoon"
		{
		"\0\s[0]Good afternoon.\e"

		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up %(posPro) daily programs.\e"

		"\0\s[0]One day, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up a brand new program %(nomPro) was testing out.\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[6]Good evening. Don't you want to see the beautiful sunset outside?\e"

 		"\0\s[0]One evening, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up %(posPro) daily programs.\e"

		"\0\s[0]One evening, %(username) woke up, turned on %(posPro) computer, and booted up the Narrator. Then %(nomPro) opened up a brand new program %(nomPro) was testing out.\e"
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[0]Do I really need to come here at this hour? Oh well, I've got nothing else going on anyway for once...\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[0]Do I really need to come here at this hour? I was very busy on an important project. Oh well, I suppose I can be here for sometime. What do you want to do tonight? Watch a movie, play a game...?\e"
		
 		"\0\s[0]Do I really need to come here at this hour? I was quite busy. Oh well, I suppose I can be here for sometime. What do you want to do tonight? Play a game, watch a movie...?\e"
		
 		"\0\s[0]Do I really need to come here at this hour? I was quite busy. Oh well, I suppose I can be here for sometime, although I believe you really need to sleep right now, as you're a human, unless you're not a human, which could explain this possibility...\e"
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[0]That's alright. I've got more important things to do with my time anyway, like composing brand new stories all about the time you got very lonely and bored without me. Good bye.\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
					
					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Bye.\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[0]That's alright. I've got m-\w8more important things to do with my time anyway. Bye.\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
					
 					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Bye.\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Bye.\w8"
					
 					"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
 				}
  			elseif timeslot == "evening"
 				{
 						if weekday == 6 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						{
 							"\0\s[0]On a Saturday evening...\w8 O-\w8Oh well, I've got important projects to work on anyway. Good bye.\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[0]That's alright. I've got more important things to do with my time anyway. Bye.\w8"
							
 							"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
 						if weekday == 6 //This is the same check as above to see if it's Saturday. Note that this doesn't have an else statement! Sometimes you can get away with that, but make sure you test thoroughly.
						//Of course, you can also cut this check entirely if you want.
 						{
 							"\0\s[0]On a Saturday night...\w8 Oh w-\w8well, I've got important projects to work on anyway. Bye.\w8"
 						}
						
 						"\0\s[0]That's alright. I've got more important things to do with my time anyway. Bye.\w8"
						
						"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[0]On a Saturday night...\w8 Oh well, I've got important projects to work on anyway. Bye.\w8"
 						}
						"\0\s[0]That's alright. I've got more important things to do with my time anyway. Good bye.\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]That's...\w8 alright, although I would've preferred if you had let me stay here for a more reasonable amount of time. I've got more important things to do with my time anyway. Good bye.\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 
 
 //--OnWindowStateMinimize

//This will run when you minimize them. Replace with what you like.

 OnWindowStateMinimize
 {
	"\0\s[0]Where am I going?\e"
}


//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[0]That was...\w8 strange. It felt like a rather cramped void...\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Narrator" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		stanleymode = 0
		"\0\s[0]Reload!\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]%(username) switched me to %(reference0).\w8 Bye.\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Narrator" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		stanleymode = 0
		"\0\s[0]Reloaded.\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[0]Goodbye, %(reference0). Hope to see you never.\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "GT Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}
